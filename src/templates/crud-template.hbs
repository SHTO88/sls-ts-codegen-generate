import { APIGatewayProxyEvent } from "aws-lambda";
import { middyfy } from "@libs/lambda";
import { {{modelName}}Model, isValidID } from "./{{functionName}}Model";
import Res, { errorResponse } from "@libs/response.model";
import { pick } from "@libs/helpers";

export const getAll = middyfy(async (event: APIGatewayProxyEvent) => {
  try {
    const filter = {};
    const options = pick(event.queryStringParameters, [
      "sort",
      "limit",
      "page",
    ]);

    const {{functionName}} = await {{modelName}}Model.paginate(filter, options);
    return Res.results({{functionName}});
  } catch (error) {
    return errorResponse(error);
  }
});

export const getByID = middyfy(async (event: APIGatewayProxyEvent) => {
    try {
      if (!isValidID(event.pathParameters.id)) return Res.badRequest(null);

      const {{functionName}} = await {{modelName}}Model.findById(event.pathParameters.id);
      if (!{{functionName}}) {
        return Res.notFound(null);
      }
      return Res.ok({{functionName}});
    } catch (error) {
      return errorResponse(error);
    }
  }
);

export const create = middyfy(async (event: APIGatewayProxyEvent) => {
  try {
    const {{functionName}} = new {{modelName}}Model(JSON.parse(event.body));
    await {{functionName}}.save();
    return Res.created({{functionName}});
  } catch (error) {
    return errorResponse(error);
  }
});

export const update = middyfy(async (event: APIGatewayProxyEvent) => {
  try {
    if (!isValidID(event.pathParameters.id)) return Res.badRequest(null);

    const {{functionName}} = await {{modelName}}Model.findByIdAndUpdate(
      event.pathParameters.id,
      JSON.parse(event.body),
      {
        new: true,
      }
    );

    if (!{{functionName}}) {
      return Res.notFound(null);
    }

    return Res.ok({{functionName}});
  } catch (error) {
    return errorResponse(error);
  }
});

export const remove = middyfy(async (event: APIGatewayProxyEvent) => {
  try {
    if (!isValidID(event.pathParameters.id)) return Res.badRequest(null);

    const {{functionName}} = await {{modelName}}Model.findByIdAndRemove(
      event.pathParameters.id
    );

    if (!{{functionName}}) {
      return Res.notFound(null);
    }

    return Res.ok({{functionName}});
  } catch (error) {
    return errorResponse(error);
  }
});
